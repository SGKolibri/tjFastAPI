// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  salt      String
  createdAt DateTime @default(now())
}

model Funcionario {
  id                 String               @id @default(cuid())
  name               String
  cargo              Cargo?               @relation(fields: [cargoId], references: [id], onDelete: SetNull) // if Cargo is deleted, set Funcionario.cargoId to null
  cargoId            String?
  cpf                String
  chavePix           String
  banco              String
  contato            String
  status             Boolean              @default(true)
  salarios           SalarioMensal[]
  tabelaFuncionarios TabelaFuncionarios[] @relation("FuncionarioTabelaFuncionarios") // Relacionamento N:N com TabelaFuncionarios
  obras              Obra[] // Array de obras associadas ao funcionário
}

// Cada registro representa os dados salariais de um funcionário para um determinado mês e ano.
// Usa uma combinação de mes, ano, e funcionarioId para garantir unicidade.
// Contém informações variáveis, como horas extras, descontos e o salário total.
model SalarioMensal {
  id            String      @id @default(cuid())
  mes           Int // Mês (1-12)
  ano           Int // Ano
  funcionario   Funcionario @relation(fields: [funcionarioId], references: [id], onDelete: Cascade) // if Funcionario is deleted, delete SalarioMensal
  funcionarioId String

  salarioBase Float // Salário base
  horasExtras Float // Total de horas extras
  faltas      Float // Total de faltas (em horas/dias)
  descontos   Float // Descontos diversos
  extras      Float // Valor extra (ex.: viagens)
  beneficios  Beneficio? // Relacionamento 1:1 com Beneficio, ? indica que é opcional
  bonus       Float // Bônus mensal

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([mes, ano, funcionarioId]) // Cada mês/ano é único para um funcionário
}

// Representa os benefícios de um funcionário para um determinado mês e ano.
// Se os benefícios (café, almoço, passagem) forem significativos ou frequentemente alterados,
// eles podem ser mantidos em uma tabela separada e relacionados ao salário mensal.
model Beneficio {
  id              String        @id @default(cuid())
  cafe            Float // Valor do benefício café
  almoco          Float // Valor do benefício almoço
  passagem        Float // Valor do benefício passagem
  salarioMensal   SalarioMensal @relation(fields: [salarioMensalId], references: [id], onDelete: Cascade) // if SalarioMensal is deleted, delete Beneficio
  salarioMensalId String        @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cargo {
  id          String        @id @default(cuid())
  nome        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Funcionario Funcionario[]
}

model TabelaFuncionarios {
  id           String        @id @default(cuid())
  funcionarios Funcionario[] @relation("FuncionarioTabelaFuncionarios")
  mes          Int
  ano          Int
  anomes       String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Evento {
  id         String   @id @default(cuid())
  titulo     String
  descricao  String?
  dataInicio DateTime
  dataFim    DateTime
  allDay     Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Obra {
  id           String        @id @default(cuid())
  nome         String
  cliente      String
  valor        Float
  dataInicio   DateTime
  dataFim      DateTime
  status       String        @default("PLANEJAMENTO")
  itens        MaterialObra[] // Relation to items through the join table
  funcionarios Funcionario[] // Array of employees associated with the project

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ObraStatus {
  PLANEJAMENTO
  EM_ANDAMENTO
  PAUSADA
  CONCLUIDA
  CANCELADA
}

// Model for construction items/materials
model Material {
  id            String     @id @default(cuid())
  nome          String
  descricao     String?
  categoria     String
  unidade       String
  precoUnitario Float
  fornecedor    String?
  codigo        String?
  
  // Additional fields for material management
  quantidade    Float?     // Quantity in stock
  status        String?    // Status: Pendente, Comprado, Em trânsito, etc.
  localizacao   String?    // Storage location
  dataCompra    DateTime?  // Purchase date
  dataEntrega   DateTime?  // Delivery date
  numeroNota    String?    // Invoice number
  
  obras         MaterialObra[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Join table to track items used in each construction project
// with additional information like quantity
model MaterialObra {
  id          String  @id @default(cuid())
  material        Material    @relation(fields: [materialId], references: [id], onDelete: Cascade)
  materialId      String
  obra        Obra    @relation(fields: [obraId], references: [id], onDelete: Cascade)
  obraId      String
  quantidade  Float // Quantity of the item used in this specific project
  valorTotal  Float? // Optional: can be calculated (quantidade * precoUnitario)
  observacoes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([materialId, obraId]) // Each item appears only once per obra
}
