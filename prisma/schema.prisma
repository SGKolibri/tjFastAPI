// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int   @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  salt      String
  createdAt DateTime @default(now())
}

model Funcionario {
  id                   String               @id @default(cuid())
  name                 String
  cargo                Cargo?               @relation(fields: [cargoId], references: [id], onDelete: SetNull) // if Cargo is deleted, set Funcionario.cargoId to null
  cargoId              String?
  cpf                  String
  chavePix             String
  banco                String
  contato              String
  status               Boolean              @default(true)
  salarios             SalarioMensal[]
  tabelaFuncionarios   TabelaFuncionarios[] @relation("FuncionarioTabelaFuncionarios") // Relacionamento N:N com TabelaFuncionarios
}

// Cada registro representa os dados salariais de um funcionário para um determinado mês e ano.
// Usa uma combinação de mes, ano, e funcionarioId para garantir unicidade.
// Contém informações variáveis, como horas extras, descontos e o salário total.
model SalarioMensal {
  id            String      @id @default(cuid())
  mes           Int // Mês (1-12)
  ano           Int // Ano
  funcionario   Funcionario @relation(fields: [funcionarioId], references: [id], onDelete: Cascade) // if Funcionario is deleted, delete SalarioMensal
  funcionarioId String

  salarioBase Float // Salário base
  horasExtras Float // Total de horas extras
  faltas      Float // Total de faltas (em horas/dias)
  descontos   Float // Descontos diversos
  extras      Float // Valor extra (ex.: viagens)
  beneficios  Beneficio? // Relacionamento 1:1 com Beneficio, ? indica que é opcional
  bonus       Float // Bônus mensal

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([mes, ano, funcionarioId]) // Cada mês/ano é único para um funcionário
}

// Representa os benefícios de um funcionário para um determinado mês e ano.
// Se os benefícios (café, almoço, passagem) forem significativos ou frequentemente alterados,
// eles podem ser mantidos em uma tabela separada e relacionados ao salário mensal.
model Beneficio {
  id              String        @id @default(cuid())
  cafe            Float // Valor do benefício café
  almoco          Float // Valor do benefício almoço
  passagem        Float // Valor do benefício passagem
  salarioMensal   SalarioMensal @relation(fields: [salarioMensalId], references: [id], onDelete: Cascade) // if SalarioMensal is deleted, delete Beneficio
  salarioMensalId String        @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cargo {
  id          String        @id @default(cuid())
  nome        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Funcionario Funcionario[]
}

//
model TabelaFuncionarios {
  id           String        @id @default(cuid())
  funcionarios Funcionario[] @relation("FuncionarioTabelaFuncionarios")
  mes          Int          
  ano          Int           
  anomes       String        @unique // Combinação de mes e ano
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Evento {
  id          String   @id @default(uuid()) // ID único para o evento
  titulo      String   // Título do evento
  descricao   String?  // Descrição opcional do evento
  dataInicio  DateTime // Data e hora de início
  dataFim     DateTime // Data e hora de término
  allDay      Boolean  // Indica se o evento dura o dia todo

  createdAt   DateTime @default(now()) // Timestamp de criação
  updatedAt   DateTime @updatedAt      // Timestamp de última atualização
}